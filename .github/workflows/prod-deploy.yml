name: deploy-to-prod
on: 
  workflow_dispatch:
    inputs:
      service:
        description: 'Service Name'     
        required: true
jobs:   
  PR:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
          token: ${{ secrets.CI_TOKEN }}
          fetch-depth: 0    
    - name: QA Deployment Image
      id: qa-image
      uses: Consensys/kubernetes-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
      with:
        args: get -n tools applications.argoproj.io qa-${{ github.event.inputs.service }}-service -o jsonpath="{..images}"
    - name: Prod Deployment Image
      id: prod-image
      uses: Consensys/kubernetes-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
      with:
        args: get -n tools applications.argoproj.io prod-${{ github.event.inputs.service }}-service -o jsonpath="{..images}"        
    - name: Check Tags
      if: ${{ steps.qa-image.outputs.result == steps.prod-image.outputs.result }}
      run: |
          echo "no changes detected in prod-${{ github.event.inputs.service }}-service"
          exit 1 
    - name: Create Variables
      id: var
      run: |
        rm -rf kubeconfig
        SHA=$(echo ${{ steps.qa-image.outputs.result }} | tr -d ] | cut -d "-" -f7)
        TAG=$(echo ${{ steps.qa-image.outputs.result }} | tr -d ] | cut -d ":" -f2)
        BRANCH=qa/${{ github.event.inputs.service }}-$SHA
        SDIR=$(echo "${{ github.event.inputs.service }}" | tr - _)_service
        echo "::set-output name=sha::$SHA"
        echo "::set-output name=tag::$TAG"
        echo "::set-output name=branch::$BRANCH"
        echo "::set-output name=dir::$SDIR"            
    - name: Create Branch
      id: branch
      run: |
        git pull --rebase origin prod/${{ steps.var.outputs.dir }}     
        git branch ${{ steps.var.outputs.branch }} ${{ steps.var.outputs.sha }}
        git checkout ${{ steps.var.outputs.branch }}
        sed -i "s/tag.*/tag: ${{ steps.var.outputs.tag }}/g" ${{ steps.var.outputs.dir }}/k8s/values.yaml
        git add ${{ steps.var.outputs.dir }}/k8s/values.yaml
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"        
        git commit -m "promote ${{ steps.var.outputs.tag }} to prod"
        git push --set-upstream origin ${{ steps.var.outputs.branch }}
    # - name: Change the Tag  
    #   run: |
    #     git pull origin master --rebase
    #     git checkout ${{ steps.var.outputs.branch }}
    #     sed -i "s/tag.*/tag: ${{ steps.var.outputs.tag }}/g" ${{ steps.var.outputs.dir }}/k8s/values.yaml
    #     git add ${{ steps.var.outputs.dir }}/k8s/values.yaml
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"        
    #     git commit -m "promote ${{ steps.var.outputs.tag }} to prod"
    #     git push --set-upstream origin ${{ steps.var.outputs.branch }}
    - name: Create Pull Request
      uses: repo-sync/pull-request@v2
      with:
        source_branch: "${{ steps.var.outputs.branch }}"
        destination_branch: "prod/${{ steps.var.outputs.dir }}"
        pr_title: "${{ github.event.inputs.service }} to prod"
        pr_body: ":crown: *An automated PR*"
        pr_reviewer: "omid-tonal"
        pr_assignee: "omid-tonal"
        pr_label: "automated pr, api, deploy"
        pr_draft: true
        pr_allow_empty: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
