name: deploy-to-prod
on: 
  workflow_dispatch:
    inputs:
      service:
        description: 'Service Name'     
        required: true
jobs:   
  PR:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
          token: ${{ secrets.CI_TOKEN }}
          fetch-depth: 0    
    - name: QA Deployment Image
      id: qa-image
      uses: Consensys/kubernetes-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
      with:
        args: get -n tools applications.argoproj.io qa-${{ github.event.inputs.service }}-service -o jsonpath="{..images}"
    - name: Prod Deployment Image
      id: prod-image
      uses: Consensys/kubernetes-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
      with:
        args: get -n tools applications.argoproj.io prod-${{ github.event.inputs.service }}-service -o jsonpath="{..images}"        
    - name: Check Tags
      if: ${{ steps.qa-image.outputs.result == steps.prod-image.outputs.result }}
      run: |
          echo "no changes detected in prod-${{ github.event.inputs.service }}-service"
          exit 1 
    - name: Create Variables
      id: var
      run: |
        rm -rf kubeconfig
        TAG=$(echo ${{ steps.qa-image.outputs.result }} | tr -d ] | cut -d ":" -f2)
        SDIR=$(echo "${{ github.event.inputs.service }}" | tr - _)_service
        SHA=$(git log --oneline -M --stat --follow --  $SDIR/k8s/values.yaml | grep $TAG | cut -d " " -f1)
        BRANCH=qa/${{ github.event.inputs.service }}-$SHA           
    - name: Create Branch
      id: branch
      run: |    
        git branch $BRANCH $SHA
        git push --set-upstream origin $BRANCH
    - name: Create Pull Request
      uses: repo-sync/pull-request@v2
      with:
        source_branch: "$BRANCH"
        destination_branch: "prod/$SDIR"
        pr_title: "${{ github.event.inputs.service }} to prod"
        pr_body: ":crown: *An automated PR*"
        pr_reviewer: "omid-tonal"
        pr_assignee: "omid-tonal"
        pr_label: "automated pr,api,deploy"
        pr_allow_empty: true
        github_token: ${{ secrets.GITHUB_TOKEN }}