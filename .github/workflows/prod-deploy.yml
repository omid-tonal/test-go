name: deploy-to-prod
on: 
  workflow_dispatch:
    inputs:
      service:
        description: 'Service Name'     
        required: true
jobs:   
  PR:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
          token: ${{ secrets.CI_TOKEN }}
          fetch-depth: 0    
    - name: QA Deployment Image
      id: qa-image
      uses: Consensys/kubernetes-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
      with:
        args: get -n tools applications.argoproj.io qa-${{ github.event.inputs.service }}-service -o jsonpath="{..images}"
    - name: Prod Deployment Image
      id: prod-image
      uses: Consensys/kubernetes-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
      with:
        args: get -n tools applications.argoproj.io prod-${{ github.event.inputs.service }}-service -o jsonpath="{..images}"        
    - name: Check Tags
      # Check the difference between prod and qa images
      if: ${{ steps.qa-image.outputs.result == steps.prod-image.outputs.result }}
      run: |
          echo "no changes detected in prod-${{ github.event.inputs.service }}-service"
          exit 1 
    - name: Create Variables
      id: var
      run: |
        rm -rf kubeconfig
        SDIR=$(echo "${{ github.event.inputs.service }}" | tr - _)_service
        QTAG=$(echo ${{ steps.qa-image.outputs.result }} | tr -d ] | cut -d ":" -f2)
        QSHA=$(git log --oneline -M --stat --follow --  $SDIR/k8s/values.yaml | grep $QTAG | cut -d " " -f1)
        QBRANCH=qa/${{ github.event.inputs.service }}-$QSHA
        PTAG=$(echo ${{ steps.prod-image.outputs.result }} | tr -d ] | cut -d ":" -f2)
        PSHA=$(git log --oneline -M --stat --follow --  $SDIR/k8s/values.yaml | grep $PTAG | cut -d " " -f1)
        PBRANCH=prod/${{ github.event.inputs.service }}_service
        PBE=$(git branch -r -l | grep $PBRANCH | cut -d '/' -f3)

        echo "::set-output name=qa-sha::$QSHA"
        echo "::set-output name=qa-branch::$QBRANCH"
        echo "::set-output name=prod-sha::$PSHA"
        echo "::set-output name=prod-branch::$PBRANCH"
        echo "::set-output name=dir::$SDIR"
        echo "::set-output name=pbe::$PBE"
    - name: Check Tags
      # Check qa tag is part of the master branch  
      if: "contains('steps.var.outputs.qa-sha', '')" 
      run: |
          echo "qa deployment tag is not part of the master branch"
          exit 1            
    - name: Create Prod Branch
      # Check prod branch exist or not      
      if: ${{ steps.var.outputs.dir != steps.var.outputs.pbe }}
      run: |    
        git branch ${{ steps.var.outputs.prod-branch }} ${{ steps.var.outputs.prod-sha }}
        git push --set-upstream origin ${{ steps.var.outputs.prod-branch }}              
    - name: Create QA Branch
      run: |    
        git branch ${{ steps.var.outputs.qa-branch }} ${{ steps.var.outputs.qa-sha }}
        git push --set-upstream origin ${{ steps.var.outputs.qa-branch }} 
    - name: Create Pull Request
      uses: repo-sync/pull-request@v2
      with:
        source_branch: "${{ steps.var.outputs.qa-branch }}"
        destination_branch: "${{ steps.var.outputs.prod-branch }}"
        pr_title: "${{ github.event.inputs.service }} to prod"
        pr_body: ":crown: *An automated PR to pormote ${{ github.event.inputs.service }}_service to Prod*"
        pr_reviewer: "omid-tonal"
        pr_assignee: "omid-tonal"
        pr_label: "automated pr,api,deploy"
        pr_draft: true
        pr_allow_empty: true
        github_token: ${{ secrets.GITHUB_TOKEN }}